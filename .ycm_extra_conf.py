# Generated by YCM Generator at 2017-07-06 10:18:38.999058

# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import os
import ycm_core
import json
import collections
import re

flags = [
    '-x',
    'c++',
    '-D',
    '-DDEBUG',
    '-DDISPLAY_565',
    '-DERROR_CHECK_LEVEL=2',
    '-D_DEBUG',
    '-D_FILE_OFFSET_BITS=64',
    '-I/usr/include/dbus-1.0',
    '-I/usr/lib/dbus-1.0/include',
    '-IEZRider',
    '-Iapplication',
    '-Ibaselib',
    '-Ibasic',
    '-Ibasic/dblib',
    '-Ibasic/font/implementation',
    '-Ibasic/lua/LuaPlus',
    '-Idatabase',
    '-Idrivers',
    '-Iffcore',
    '-Imodules',
    '-Imodules/mod_vis',
    '-Inavigation',
    '-Iproj_igo9',
    '-Iproj_jlr_japan',
    '-Iui_level',
    '-Warray-bounds',
    '-Wformat',
    '-Wmissing-braces',
    '-Wno-format-extra-args',
    '-Wno-invalid-offsetof',
    '-Wreturn-type',
    '-Wsequence-point',
    '-Wstrict-aliasing',
    '-Wswitch',
    '-Wtrigraphs',
    '-Wuninitialized',
    '-Wunused-function',
    '-m32',
    '-I', '.',
    '-I', 'EZRider/src',
    '-I', 'basic/font/implementation',
    '-I', 'proj_jlr_japan',
]


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )

compilation_database_folder = DirectoryOfThisScript()

included_cpp_re = re.compile('^\s*#\s*include\s+[<\"](.*\.cpp)[>\"]')
def GetIncludedCppInLine(line):
  result = included_cpp_re.match(line)
  if result:
    return result.group(1)
  return ''

def GetIncludedCpps(command):
  rv = []
  if os.path.exists(command['file']):
    with open(command['file']) as unity:
      for line in unity:
        included = GetIncludedCppInLine(line)
        if included:
          dirn = os.path.dirname(command['file'])
          complt = os.path.join(dirn,included)
          if os.path.exists(complt):
            rv.append(complt)
  return rv

def GenerateCompilationDatabaseFromUnifiedBuild():
  dbfile = compilation_database_folder + '/compile_commands_bear.json'
  outfile = compilation_database_folder + '/compile_commands.json'
  if os.path.exists(dbfile):
    with open(dbfile) as dbjson:
      db = json.load(dbjson)
      
      allCommands = collections.deque()
      for entry in db:
        allCommands.append(entry)

      allJson = []
      while allCommands:
        command = allCommands.popleft()
        for cpp in GetIncludedCpps(command):
          newcommand = {'file': cpp, 'command': command['command'], 'directory': command['directory']}
          allCommands.append(newcommand)
        allJson.append(command)

      with open(outfile, 'w' ) as ofile:
        json.dump(allJson, ofile)

    

if os.path.exists( compilation_database_folder ):
  GenerateCompilationDatabaseFromUnifiedBuild()
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.C', '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.H', '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }

